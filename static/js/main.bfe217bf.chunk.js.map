{"version":3,"sources":["helpers.js","Card.js","CardContainer.js","App.js","serviceWorker.js","index.js"],"names":["choice","arr","Math","floor","random","length","Card","props","state","color","colors","handleCLick","bind","newColor","this","setState","pickColor","className","style","backgroundColor","onClick","Component","CardContainer","boxes","Array","from","numBoxes","map","allCard","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mTAEA,SAASA,EAAOC,GAEd,OAAOA,EADWC,KAAKC,MAAMD,KAAKE,SAAWH,EAAII,S,UC+BpCC,E,kDA7Bb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,MAAOT,EAAO,EAAKO,MAAMG,SACxC,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBAHF,E,wDAOjB,IAAIC,EACJ,GACEA,EAAWb,EAAOc,KAAKP,MAAMG,cACtBG,IAAaC,KAAKN,MAAMC,OAEjCK,KAAKC,SAAS,CAAEN,MAAOI,M,oCAGvBC,KAAKE,c,+BAIL,OACE,yBACEC,UAAU,OACVC,MAAO,CAAEC,gBAAiBL,KAAKN,MAAMC,OACrCW,QAASN,KAAKH,kB,GAxBHU,aCAbC,G,6KAgBM,IAAD,OACDC,EAAQC,MAAMC,KAAK,CAAEpB,OAAQS,KAAKP,MAAMmB,WAAYC,KAAI,kBAC5D,kBAAC,EAAD,CAAMjB,OAAQ,EAAKH,MAAMqB,aAE3B,OAAO,yBAAKX,UAAU,iBAAiBM,O,GApBfF,cAAtBC,EACGO,aAAe,CACpBH,SAAU,GACVE,QAAS,CACP,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,OACA,SAWSN,Q,MCfAQ,MARf,WACE,OACE,yBAAKb,UAAU,OACb,kBAAC,EAAD,QCIcc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.bfe217bf.chunk.js","sourcesContent":["/** Return a random item from a list. */\r\n\r\nfunction choice(arr) {\r\n  let randomIndex = Math.floor(Math.random() * arr.length);\r\n  return arr[randomIndex];\r\n}\r\n\r\nexport { choice };\r\n","import React, { Component } from \"react\";\r\nimport { choice } from \"./helpers\";\r\nimport \"./Card.css\";\r\n\r\nclass Card extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { color: choice(this.props.colors) };\r\n    this.handleCLick = this.handleCLick.bind(this);\r\n  }\r\n\r\n  pickColor() {\r\n    let newColor;\r\n    do {\r\n      newColor = choice(this.props.colors);\r\n    } while (newColor === this.state.color);\r\n\r\n    this.setState({ color: newColor });\r\n  }\r\n  handleCLick() {\r\n    this.pickColor();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div\r\n        className=\"Card\"\r\n        style={{ backgroundColor: this.state.color }}\r\n        onClick={this.handleCLick}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Card;\r\n","import React, { Component } from \"react\";\r\nimport Card from \"./Card\";\r\nimport \"./CardContainer.css\";\r\n\r\nclass CardContainer extends Component {\r\n  static defaultProps = {\r\n    numBoxes: 18,\r\n    allCard: [\r\n      \"#010\",\r\n      \"#020\",\r\n      \"#030\",\r\n      \"#040\",\r\n      \"#050\",\r\n      \"#060\",\r\n      \"#070\",\r\n      \"#080\",\r\n      \"#090\",\r\n      \"#100\",\r\n    ],\r\n  };\r\n  render() {\r\n    const boxes = Array.from({ length: this.props.numBoxes }).map(() => (\r\n      <Card colors={this.props.allCard} />\r\n    ));\r\n    return <div className=\"CardContainer\">{boxes}</div>;\r\n  }\r\n}\r\n\r\nexport default CardContainer;\r\n","import React from \"react\";\nimport CardContainer from \"./CardContainer\";\n\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CardContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}